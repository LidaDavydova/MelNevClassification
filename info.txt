1. Методика создания приложения, поэтапно:
	1. Сбор данных для обучения (создание датасета):
	- Нашли и скачали подготовленные для обучения избражения меланом и родинок.
	- Просмотрели качество этих изображений
	- Создали таблицу .csv с данными по каждому изображению, которые помогут в обучении по каждому изображению. (тип: меланома, родинка, неизвестно; пол; возраст)
	- Если данные неизвестны, то заменяли информацию о них усредненным значением.

	2. Расписали начальные параметры для обучения модели:
	- количество изображений на обучение
	- количество изображений на тестирование 
	- количество изображений на валидационную выборку
	- размер каждого изображения (224*224)
	- batch_size = 16 # размер батча, то есть сколько изображений будет подаваться модели на входной слой

	Мы решили выделить 25% на тест и остальное на тренировку. Тренировочные
	мы поделили на валидационную (20%), и остальные на чисто тренировочные (80%)

	- 2 класса на классификацию

	3. Написали архитектуру сверточной нейронной сети для нашей задачи - классификаци:
	Модели:
	1) В 1 модели сделали 3 слоя свертки, использовали библиотеку Keras
	2) Во 2 модели сделалли 7 слоев свертки, использовали библиотеку Keras
	- Для каждой модели перед подачей изображения модели, сначала делаем аугментации (у нас это зеркальное отражение, рандомная ротация на менье чем 10 градусов, рандомное увеличение/уменьшение на менье чем 10% размера изображения)
	3) VGG16, использовали библиотеку Keras
	4) В 4 модели сделали 2 слоя свертки, использовали библиотеку PyTorch

	4. Запустили обучение модели и по истории обучения построили графики, которые показывают параметры потерь и точности (loss и accuracy)
	
2. Аппробация лучшей модели (1 из 3 сверточных слоев):
	Точность = 84%
	Потери = 40%
	
3. Анализ:
	Плюсы: 
	* удобно дать изображение модели, а она предскажет что на изображении - меланома или родинка
	* хороший старт для будущих свершений
	* обучено на достаточно большом датасете (30 тыс изображений)
	Минусы:
	* большие потери (loss) во время обучения
	* пока лучше не использовать в практических целях (часто ошибается)
	
4. Подобные реализации:
https://www.kaggle.com/code/abhishek/melanoma-detection-with-pytorch/notebook
https://www.kaggle.com/code/mobassir/analyzing-melanoma-see-like-dermatologist
https://www.kaggle.com/code/alexo98/skin-cancer-recognition-bachelor/notebook
https://www.kaggle.com/code/baro1502/skin-cancer-detection-implementing-vgg19-structure/notebook
https://www.tensorflow.org/api_docs/python/tf/keras/applications/efficientnet/EfficientNetB3
	
	
